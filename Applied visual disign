Appied visual design

Visual design is a combination of typography, color theory, graphics, animation, page layout, and more to help deliver your unique message.

In this course, you'll learn how to apply these different elements of visual design to your webpages.
Create Visual Balance Using the text-align Property
This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.

Text is often a large part of web content. CSS has several options for how to align it with the text-align property.

text-align: justify; causes all lines of text except the last line to meet the left and right edges of the line box.

text-align: center; centers the text

text-align: right; right-aligns the text

And text-align: left; (the default) left-aligns the text.
Align the h4 tag's text, which says "Google", to the center. Then justify the paragraph tag which contains information about how Google was founded.


You can specify the width of an element using the width property in CSS. Values can be given in relative length units (such as em), 
absolute length units (such as px), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:

img {
  width: 220px;
}
Add a width property to the entire card and set it to an absolute value of 245px. Use the fullCard class to select the element.
To emphasize text, you can use the em tag. This displays text as italicized, as the browser applies the CSS of font-style: italic; to the element.
Wrap an em tag around the contents of the paragraph tag to give it emphasis.

To strikethrough text, which is when a horizontal line cuts across the characters, you can use the s tag. 
It shows that a section of text is no longer valid. With the s tag, the browser applies the CSS of text-decoration: line-through; to the element.

You can use the hr tag to add a horizontal line across the width of its containing element. 
This can be used to define a change in topic or to visually separate groups of content.


Instead of adjusting your overall background or the color of the text to make the foreground easily readable, 
you can add a background-color to the element holding the text you want to emphasize. This challenge uses rgba() instead of hex codes or normal rgb().

rgba stands for:
  r = red
  g = green
  b = blue
  a = alpha/level of opacity
The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, 
which is fully transparent or clear. rgba() is great to use in this case, as it allows you to adjust the opacity. 
This means you don't have to completely block out the background.

You'll use background-color: rgba(45, 45, 45, 0.1) for this challenge. 
It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.
To make the text stand out more, adjust the background-color of the h4 element to the given rgba() value.

Also for the h4, remove the height property and add padding of 10px.

The font size of header tags (h1 through h6) should generally be larger than the font size of paragraph tags. 
This makes it easier for the user to visually understand the layout and level of importance of everything on the page. 
You use the font-size property to adjust the size of the text in an element.


Add a box-shadow to a Card-like Element
The box-shadow property applies one or more shadows to an element.

The box-shadow property takes values for

offset-x (how far to push the shadow horizontally from the element),
offset-y (how far to push the shadow vertically from the element),
blur-radius,
spread-radius and
color, in that order.
The blur-radius and spread-radius values are optional.

Multiple box-shadows can be created by using commas to separate properties of each box-shadow element.

Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:

box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

<style>
  h4 {
    text-align: center;
    background-color: rgba(45, 45, 45, 0.1);
    padding: 10px;
    font-size: 27px;
  }
  p {
    text-align: justify;
  }
  .links {
    text-align: left;
    color: black;
  }



  .fullCard {
    width: 245px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 5px;
    padding: 4px;
  }
  .cardContent {
    padding: 10px;
  }
  .cardText {
    margin-bottom: 30px;
  }
</style>
<div class="fullCard" id="thumbnail">
  <div class="cardContent">
    <div class="cardText">
      <h4>Alphabet</h4>
      <hr>
      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>
    </div>
    <div class="cardLinks">
      <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a><br><br>
      <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
    </div>
  </div>
</div>



Add a box-shadow to a Card-like Element
The box-shadow property applies one or more shadows to an element.

The box-shadow property takes values for

offset-x (how far to push the shadow horizontally from the element),
offset-y (how far to push the shadow vertically from the element),
blur-radius,
spread-radius and
color, in that order.
The blur-radius and spread-radius values are optional.

Multiple box-shadows can be created by using commas to separate properties of each box-shadow element.

Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:

box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

The element now has an id of thumbnail. With this selector, use the example CSS values above to place a box-shadow on the card.

<style>
  h4 {
    text-align: center;
    background-color: rgba(45, 45, 45, 0.1);
    padding: 10px;
    font-size: 27px;
  }
  p {
    text-align: justify;
  }
  .links {
    text-align: left;
    color: black;
  }
#thubnail {
  box-shadow: 
  0 10px 20px rgba(0,0,0,0.19), 
  0 6px 6px rgba(0,0,0,0.23);
  }


  .fullCard {
    width: 245px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 5px;
    padding: 4px;
  }
  .cardContent {
    padding: 10px;
  }
  .cardText {
    margin-bottom: 30px;
  }
</style>
<div class="fullCard" id="thumbnail">
  <div class="cardContent">
    <div class="cardText">
      <h4>Alphabet</h4>
      <hr>
      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>
    </div>
    <div class="cardLinks">
      <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a><br><br>
      <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
    </div>
  </div>
</div>

The opacity property in CSS is used to adjust the opacity, or conversely, the transparency for an item.

A value of 1 is opaque, which isn't transparent at all.
A value of 0.5 is half see-through.
A value of 0 is completely transparent.
The value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.
Set the opacity of the anchor tags to 0.7 using links class to select them.

Use the text-transform Property to Make Text Uppercase
The text-transform property in CSS is used to change the appearance of text. 
It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.

The following table shows how the different text-transformvalues change the example text "Transform me".

Value	Result
lowercase	"transform me"
uppercase	"TRANSFORM ME"
capitalize	"Transform Me"
initial	Use the default value
inherit	Use the text-transform value from the parent element
none	Default: Use the original text
Transform the text of the h4 to be uppercase using the text-transform property.



Set the font-size for Multiple Heading Elements
The font-size property is used to specify how large the text is in a given element. 
This rule can be used for multiple elements to create visual consistency of text on a page. 
In this challenge, you'll set the values for all h1 through h6 tags to balance the heading sizes.
In the style tags, set the font-size of the:

h1 tag to 68px.
h2 tag to 52px.
h3 tag to 40px.
h4 tag to 32px.
h5 tag to 21px.
h6 tag to 14px.

Set the font-weight for Multiple Heading Elements
You set the font-size of each heading tag in the last challenge, here you'll adjust the font-weight.

The font-weight property sets how thick or thin characters are in a section of text.
Set the font-weight of the h1 tag to 800.
Set the font-weight of the h2 tag to 600.
Set the font-weight of the h3 tag to 500.
Set the font-weight of the h4 tag to 400.
Set the font-weight of the h5 tag to 300.
Set the font-weight of the h6 tag to 200.

<style>
  h1 {
    font-size: 68px;
    font-weight: 800;
  }
  h2 {
    font-size: 52px;
    font-weight: 600;
  }
  h3 {
    font-size: 40px;
    font-weight: 500;

  }
  h4 {
    font-size: 32px;
    font-weight: 400;

  }
  h5 {
    font-size: 21px;
    font-weight: 300;

  }
  h6 {
    font-size: 14px;
    font-weight: 200;

  }
</style>
<h1>This is h1 text</h1>
<h2>This is h2 text</h2>
<h3>This is h3 text</h3>
<h4>This is h4 text</h4>
<h5>This is h5 text</h5>
<h6>This is h6 text</h6>


Adjust the Hover State of an Anchor Tag
This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, 
in order to select a specific state of the element.

For example, the styling of an anchor tag can be changed for its hover state using the :hover pseudo-class selector. 
Here's the CSS to change the color of the anchor tag to red during its hover state:

a:hover {
  color: red;
}
The code editor has a CSS rule to style all a tags black. Add a rule so that when the user hovers over the a tag, the color is blue.

<style>
  a {
    color: #000;
  }
  a:hover {
  color: blue;
}


</style>
<a href="https://freecatphotoapp.com/" target="_blank">CatPhotoApp</a>

Change an Element's Relative Position
CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. 
Block-level items automatically start on a new line (think headings, paragraphs, 
and divs) while inline items sit within surrounding content (like images or spans). 
The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it.

When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position 
in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, 
percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:

p {
  position: relative;
  bottom: 10px;
}
Changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if 
that item were in its default position.

Note: Positioning gives you a lot of flexibility and power over the visual layout of a page. 
It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. 
This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.
Change the position of the h2 to relative, and use a CSS offset to move it 15 pixels away from the top of where it sits in the normal flow. 
Notice there is no impact on the positions of the surrounding h1 and p elements.

<style>
  h2 {
    position: relative;
    top: 15px;

  }
</style>
<body>
  <h1>On Being Well-Positioned</h1>
  <h2>Move me!</h2>
  <p>I still think the h2 is where it normally sits.</p>
</body>

Move a Relatively Positioned Element with CSS Offsets
The CSS offsets of top or bottom, and left or right tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. 
You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). 
As you saw in the last challenge, using the top offset moved the h2 downwards. Likewise, using a left offset moves an item to the right.
Use CSS offsets to move the h2 15 pixels to the right and 10 pixels up.

<head>
<style>
  h2 {
    position: relative;
    left: 15px;
    bottom: 10px;

  }
</style>
</head>
<body>
  <h1>On Being Well-Positioned</h1>
  <h2>Move me!</h2>
  <p>I still think the h2 is where it normally sits.</p>
</body>

Lock an Element to its Parent with Absolute Positioning
The next option for the CSS position property is absolute, which locks the element in place relative to its parent container. 
Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. 
The CSS offset properties (top or bottom and left or right) are used to adjust the position.

One nuance with absolute positioning is that it will be locked relative to its closest positioned ancestor. 
If you forget to add a position rule to the parent item, (this is typically done using position: relative;), 
the browser will keep looking up the chain and ultimately default to the body tag.
Lock the #searchbar element to the top-right of its section parent by declaring its position as absolute. 
Give it top and right offsets of 50 pixels each.

<style>
  #searchbar {
    position: absolute;
    top: 50px;
    bottom: 50px;
 }
  section {
    position: relative;
  }
</style>
<body>
  <h1>Welcome!</h1>
  <section>
    <form id="searchbar">
      <label for="search">Search:</label>
      <input type="search" id="search" name="search">
      <input type="submit" name="submit" value="Go!">
    </form>
  </section>
</body>

Lock an Element to the Browser Window with Fixed Positioning
The next layout scheme that CSS offers is the fixed position, which is a type of absolute positioning that locks an element relative to the browser window. 
Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. 
Other items no longer "realize" where it is positioned, which may require some layout adjustments elsewhere.

One key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.
The navigation bar in the code is labeled with an id of navbar. Change its position to fixed, 
and offset it 0 pixels from the top and 0 pixels from the left. After you have added the code, 
scroll the preview window to see how the navigation stays in place.


Push Elements Left or Right with the float Property
The next positioning tool does not actually use position, but sets the float property of an element. 
Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element.
It's commonly used with the width property to specify how much horizontal space the floated element requires.
The given markup would work well as a two-column layout, with the section and aside elements next to each other.
Give the #left item a float of left and the #right item a float of right.

Change the Position of Overlapping Elements with the z-index Property
When elements are positioned to overlap (i.e. using position: absolute | relative | fixed | sticky), 
the element coming later in the HTML markup will, by default, appear on the top of the other elements. 
However, the z-index property can specify the order of how elements are stacked on top of one another. 
It must be an integer (i.e. a whole number and not a decimal), 
and higher values for the z-index property of an element move it higher in the stack than those with lower values.
Add a z-index property to the element with the class name of first (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).


<style>
  div {
    width: 60%;
    height: 200px;
    margin-top: 20px;
  }

  .first {
    background-color: red;
    position: absolute;
    z-index: 2;
  }
  .second {
    background-color: blue;
    position: absolute;
    left: 40px;
    top: 50px;
    z-index: 1;
  }
</style>

<div class="first"></div>
<div class="second"></div>

Center an Element Horizontally Using the margin Property
Another positioning technique is to center a block element horizontally. One way to do this is to set its margin to a value of auto.

This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the display property to block.
Center the div on the page by adding a margin property with a value of auto.

<style>
  div {
    background-color: blue;
    height: 100px;
    width: 100px;
    margin: auto;

  }
</style>
<div></div>


Learn about Complementary Colors
Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, 
color can draw attention to content, evoke emotions, or create visual harmony. 
Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that 
works with your content.

The color wheel is a useful tool to visualize how colors relate to each other - 
it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, 
they are called complementary colors. 
They have the characteristic that if they are combined, they "cancel" each other out and create a gray color. 
However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.

Some examples of complementary colors with their hex codes are:

red (#FF0000) and cyan (#00FFFF)
green (#00FF00) and magenta (#FF00FF)
blue (#0000FF) and yellow (#FFFF00)
This is different than the outdated RYB color model that many of us were taught in school, which has different primary and complementary colors. 
Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing). 
Read here for more information on this complex subject.

There are many color picking tools available online that have an option to find the complement of a color.

Note: Using color can be a powerful way to add visual interest to a page. 
However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. 
This issue will be covered in more detail in the Applied Accessibility challenges.
Change the background-color property of the blue and yellow classes to their respective colors. 
Notice how the colors look different next to each other than they do compared against the white background

<style>
  body {
    background-color: #FFFFFF;
  }
  .blue {
    background-color: blue;
  }
  .yellow {
    background-color: yellow;
  }
  div {
    display: inline-block;
    height: 100px;
    width: 100px;
  }
</style>
<div class="blue"></div>
<div class="yellow"></div>
